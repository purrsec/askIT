# .github/workflows/release.yml

name: Create Release and Build Binaries

on:
  push:
    tags:
      - 'v*.*.*' # Déclenche le workflow quand un tag comme v1.0.0 est poussé

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest # Le job principal pour créer la release tourne sur Linux
    permissions:
      contents: write

    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Store Release URL
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_upload_url.txt

      - name: Upload Release URL as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-info
          path: release_upload_url.txt

  build-binaries:
    name: Build Binaries on ${{ matrix.os }}
    needs: build-and-release # Ce job dépend du premier
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest] # Les 3 OS cibles
        include:
          - os: ubuntu-latest
            asset_name_suffix: '-linux'
            asset_content_type: 'application/octet-stream'
          - os: macos-latest
            asset_name_suffix: '-macos'
            asset_content_type: 'application/octet-stream'
          - os: windows-latest
            asset_name_suffix: '.exe'
            asset_content_type: 'application/vnd.microsoft.portable-executable'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install dependencies
        run: poetry install --no-root --no-dev

      - name: Build with PyInstaller
        run: poetry run pyinstaller src/askit/cli.py --name askit-cli --onefile --clean

      - name: Rename artifact for Windows
        if: matrix.os == 'windows-latest'
        run: mv dist/askit-cli.exe dist/askit-cli-windows.exe

      - name: Rename artifact for macOS
        if: matrix.os == 'macos-latest'
        run: mv dist/askit-cli dist/askit-cli-macos

      - name: Rename artifact for Linux
        if: matrix.os == 'ubuntu-latest'
        run: mv dist/askit-cli dist/askit-cli-linux
      
      - name: Download Release URL
        uses: actions/download-artifact@v4
        with:
          name: release-info

      - name: Read Release URL
        id: get_upload_url
        run: |
          echo "::set-output name=url::$(cat release_upload_url.txt)"
      
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_upload_url.outputs.url }}
          asset_path: dist/askit-cli-${{ matrix.os }}
          asset_name: askit-cli${{ matrix.asset_name_suffix }}
          asset_content_type: ${{ matrix.asset_content_type }} 