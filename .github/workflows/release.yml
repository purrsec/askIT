# .github/workflows/release.yml

name: Create Release and Build Binaries

on:
  push:
    tags:
      - 'v*.*.*' # Déclenche le workflow quand un tag comme v1.0.0 est poussé

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: softprops/action-gh-release@v2
        id: create_release
        with:
          draft: false
          prerelease: false
          generate_release_notes: true

  build-windows:
    name: Build for Windows (x86_64)
    needs: create-release
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.12' }
      - uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
      - name: Install dependencies
        run: poetry install
        shell: bash
      - name: Build with PyInstaller
        run: poetry run pyinstaller src/askit/cli.py --name askit-cli --onefile --clean
        shell: bash
      - name: Rename asset
        run: Rename-Item -Path dist/askit-cli.exe -NewName "askit-cli-${{ github.ref_name }}-windows-x86_64.exe"
        shell: pwsh
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: dist/askit-cli-${{ github.ref_name }}-windows-x86_64.exe
          asset_name: askit-cli-${{ github.ref_name }}-windows-x86_64.exe
          asset_content_type: application/vnd.microsoft.portable-executable

  build-linux:
    name: Build for Linux (amd64)
    needs: create-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.12' }
      - uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
      - name: Install dependencies
        run: poetry install
        shell: bash
      - name: Build and package .deb
        run: |
          poetry run pyinstaller src/askit/cli.py --name askit-cli --onefile --clean
          VERSION=${{ github.ref_name }}
          DEBIAN_VERSION=${VERSION#v}
          mkdir -p staging/DEBIAN
          mkdir -p staging/usr/local/bin
          cp dist/askit-cli staging/usr/local/bin/
          cat <<EOF > staging/DEBIAN/control
          Package: askit-cli
          Version: $DEBIAN_VERSION
          Architecture: amd64
          Maintainer: Your Name <you@example.com>
          Description: A command-line assistant that uses AI to provide suggestions for shell commands.
          EOF
          dpkg-deb --build staging askit-cli-${VERSION}-linux-amd64.deb
        shell: bash
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: askit-cli-${{ github.ref_name }}-linux-amd64.deb
          asset_name: askit-cli-${{ github.ref_name }}-linux-amd64.deb
          asset_content_type: application/vnd.debian.binary-package

  build-macos:
    name: Build for macOS (pkg)
    needs: create-release
    runs-on: macos-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.12' }
      - uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
      - name: Install dependencies
        run: poetry install
        shell: bash
      - name: Build and package .pkg
        run: |
          # Build binary for Apple Silicon
          poetry run pyinstaller src/askit/cli.py --name askit-cli --onefile --clean --target-arch arm64
          
          # Create a staging directory for the PKG
          mkdir -p staging/usr/local/bin
          cp dist/askit-cli staging/usr/local/bin/

          # Set version variables
          VERSION=${{ github.ref_name }}
          PKG_VERSION=${VERSION#v}

          # Create the .pkg installer
          pkgbuild --root staging \
                   --install-location "/" \
                   --identifier "io.github.askit-ai.askit-cli" \
                   --version "$PKG_VERSION" \
                   "askit-cli-${VERSION}-macos-arm64.pkg"
        shell: bash
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: askit-cli-${{ github.ref_name }}-macos-arm64.pkg
          asset_name: askit-cli-${{ github.ref_name }}-macos-arm64.pkg
          asset_content_type: application/x-newton-compatible-pkg 